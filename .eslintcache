[{"/Users/junlu/Documents/react/my-app/src/index.js":"1","/Users/junlu/Documents/react/my-app/src/Table.js":"2","/Users/junlu/Documents/react/my-app/src/Form.js":"3","/Users/junlu/Documents/react/my-app/src/Chat.js":"4","/Users/junlu/Documents/react/my-app/src/LoginControl.js":"5","/Users/junlu/Documents/react/my-app/src/MessageCard.js":"6","/Users/junlu/Documents/react/my-app/src/Counter.js":"7","/Users/junlu/Documents/react/my-app/src/store/index.js":"8","/Users/junlu/Documents/react/my-app/src/messageBoard/MessageBoard.js":"9","/Users/junlu/Documents/react/my-app/src/store/reducer.js":"10","/Users/junlu/Documents/react/my-app/src/messageBoard/store/index.js":"11","/Users/junlu/Documents/react/my-app/src/messageBoard/store/constants.js":"12","/Users/junlu/Documents/react/my-app/src/messageBoard/store/actionCreator.js":"13","/Users/junlu/Documents/react/my-app/src/messageBoard/store/reducer.js":"14","/Users/junlu/Documents/react/my-app/src/header/index.js":"15","/Users/junlu/Documents/react/my-app/src/SockConstants.js":"16","/Users/junlu/Documents/react/my-app/src/CardSample.js":"17","/Users/junlu/Documents/react/my-app/src/dviSample.js":"18"},{"size":227,"mtime":1612365388000,"results":"19","hashOfConfig":"20"},{"size":1340,"mtime":1612021804000,"results":"21","hashOfConfig":"20"},{"size":709,"mtime":1611526890000,"results":"22","hashOfConfig":"20"},{"size":8076,"mtime":1612565112000,"results":"23","hashOfConfig":"20"},{"size":1489,"mtime":1610982138000,"results":"24","hashOfConfig":"20"},{"size":829,"mtime":1608735314804,"results":"25","hashOfConfig":"20"},{"size":1927,"mtime":1611533726000,"results":"26","hashOfConfig":"20"},{"size":438,"mtime":1610807628932,"results":"27","hashOfConfig":"20"},{"size":2212,"mtime":1611411263486,"results":"28","hashOfConfig":"20"},{"size":213,"mtime":1610807628933,"results":"29","hashOfConfig":"20"},{"size":170,"mtime":1610807628932,"results":"30","hashOfConfig":"20"},{"size":193,"mtime":1610807628932,"results":"31","hashOfConfig":"20"},{"size":778,"mtime":1611411263486,"results":"32","hashOfConfig":"20"},{"size":939,"mtime":1611411263486,"results":"33","hashOfConfig":"20"},{"size":1911,"mtime":1611411263466,"results":"34","hashOfConfig":"20"},{"size":757,"mtime":1637588731279,"results":"35","hashOfConfig":"20"},{"size":1395,"mtime":1612296604000,"results":"36","hashOfConfig":"20"},{"size":508,"mtime":1612564112000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"8uooz1",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"41"},"/Users/junlu/Documents/react/my-app/src/index.js",["82"],"import ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoginControl from './LoginControl'\nimport CardSample from './CardSample'\n\nReactDOM.render(<LoginControl />, document.getElementById('root'))",["83","84"],"/Users/junlu/Documents/react/my-app/src/Table.js",[],"/Users/junlu/Documents/react/my-app/src/Form.js",[],"/Users/junlu/Documents/react/my-app/src/Chat.js",["85","86","87","88","89","90","91","92","93","94","95"],"import React, {Component} from 'react'\r\nimport MessageTable from './Table'\r\nimport MessageEditor from './Form'\r\nimport {Container, Badge, Jumbotron, Row, Col} from 'react-bootstrap'\r\nimport Counters from './Counter'\r\nimport SockJS from \"sockjs-client\"\r\nimport Stomp from \"stompjs\"\r\nimport * as messageTypes from './SockConstants'\r\nimport ReactDOM from 'react-dom'\r\nimport MesssgeCard from './CardSample'\r\nimport DivSample from './dviSample'\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n   isConnected: false,\r\n   currentEndpoint: '',\r\n   receiverList:[],\r\n   connectedList:[],\r\n   messageCount: 0,\r\n   messages: [],\r\n   userId:null\r\n  }\r\n  \r\n  currentEndpoint=''\r\n  start = Date.now();\r\n  isWindowFocused = true;\r\n    \r\n  sockjs = new SockJS(messageTypes._SOCK_SERVER_EXTERNAL);\t \r\n  stompClient = Stomp.over(this.sockjs);\r\n\t\r\n  onFocus = () => {\r\n\tthis.isWindowFocused = true;  \r\n    document.title = \"NO NEW MESSAGES\"  \r\n  }\r\n  \r\n  onBlur = () => {\r\n\tthis.isWindowFocused = false;\r\n  }\r\n  \r\n  componentDidMount() {\r\n\tdocument.title = \"chat-chat\"  \r\n\twindow.addEventListener('focus', this.onFocus);\r\n\twindow.addEventListener('blur', this.onBlur);\r\n\r\n  \tthis.stompClient.connect({}, (frame) => {\t\r\n\t    console.log('STOMP connected')\r\n\t  }, (error)=>{console.log(\"STOMP error\"+ error)})\r\n\t   \r\n    this.interval = setInterval(\r\n\t  () => {this.setStatusCheck()}, \r\n      1000\r\n     ) \r\n  }\r\n  \r\n  insertMessage = (msg) => {\r\n\tvar htmlmsg = \"\"\r\n\tvar imgName = \"\"\r\n\tif (msg.messageSender === this.props.loginUser) {\r\n\t  imgName = this.props.loginUser + \".jpg\"\r\n\t  htmlmsg=\"<div style=\\\"text-align:right;\\\"><span style=\\\"color:green\\\">\" + msg.message + \" \" + \"</span>\" + \"<Image src=\"+imgName +\" width= \\\"40px\\\" height=\\\"40px\\\" style=border-radius:50% /></div>\"\t\r\n\t}else if (msg.messageSender ===  messageTypes._MESSAGE__TIME_SPLITTER) {\r\n\t  htmlmsg=\"<div style=\\\"text-align:center;color:SpringGreen\\\">\" + \"--- \" + msg.message + \" ---\" + \"<br/></div>\"\t\r\n\t}\r\n\telse {\r\n\t  if (this.state.connectedList.length > 0) {\r\n\t    imgName = this.state.connectedList[0]+ \".jpg\";\r\n      }\r\n\t  htmlmsg= \"<div style=\\\"text-align:left;\\\"> <Image src=\"+imgName +\" width= \\\"40px\\\" height=\\\"40px\\\" style=border-radius:50% />\"+\" \" +  msg.message + \"</div>\"\r\n\t}\r\n\r\n\tdocument.getElementById('mCard').innerHTML += htmlmsg ;\r\n\tdocument.getElementById('mCard').scrollTop = document.getElementById('mCard').scrollHeight - document.getElementById('mCard').clientHeight;\r\n  }\t  \r\n  \r\n  setStatusCheck = () => {\r\n\tif (this.state.isConnected === false) {  \r\n\t  if (this.sockjs.readyState === messageTypes._SOCKET_CLOSED) {\r\n\t\tthis.stompClient.disconnect()\r\n\t\tthis.sockjs.close()  \r\n\t    console.log(\"switch to internal<><><><><><><>\")\t\r\n\t    this.sockjs = new SockJS(messageTypes._SOCK_SERVER)\r\n\t\tthis.stompClient = Stomp.over(this.sockjs);\r\n\t\tthis.stompClient.connect({}, (frame) => {\t\r\n\t    console.log('STOMP connected')\r\n\t    }, (error)=>{console.log(\"STOMP error\"+ error)})\r\n\t  }\r\n\t  \r\n\t  this.handleConnect()\r\n\t} \r\n  }\r\n  \r\n  componentWillUnmount() {\r\n\tconsole.log('Unmount, delete user:' + this.state.userId)  \r\n\t\r\n\tthis.stompClient.send(messageTypes._MESSAGE_DEST_DELETEUSER, {}, JSON.stringify({\r\n\t  name: this.props.loginUser,\r\n\t  id: this.state.userId\r\n\t}))\r\n\t  \r\n\tclearInterval(this.interval);\r\n\r\n\tthis.sockjs.close()  \r\n    this.stompClient.disconnect()\r\n  }\r\n  \r\n  handleConnect = () => {\r\n\tif (this.sockjs.readyState === messageTypes._SOCKET_READY) {  \r\n\t\r\n\t  this.setState({isConnected:true})\r\n\t  console.log('connection is Ready. State:' + this.sockjs.readyState)\r\n\r\n\t  this.stompClient.subscribe(messageTypes._CHAT_TOPIC_PREFIX+this.props.loginUser, (payload) => {\r\n\t    var respMessage = JSON.parse(payload.body);\r\n\t\tconsole.log(\"connected/subscribe/chat request<><><>\"+respMessage.message)\t  \t     \r\n\t\tif (respMessage.message === messageTypes._CHAT_REQUEST) {\r\n\t\t  if (this.endpoint !== respMessage.messageReceiver) {\r\n\t\t\tthis.setState({connectedList:respMessage.messageSender.split()})\r\n\r\n\t\t    this.stompClient.subscribe(messageTypes._CHAT_TOPIC_PREFIX+respMessage.messageReceiver, (pload) => {\r\n\t\t\t  var respMsg = JSON.parse(pload.body);\r\n\t\t\t  this.insertMessage(respMsg)\r\n\t\t\t  /*var newMessages = this.state.messages.splice(0,0, respMsg)\r\n\t\t\t  this.setState({messaage: newMessages})\t*/\t  \r\n\t\t\t  if (!this.isWindowFocused) {\r\n\t\t\t\tdocument.title = \"<<< MESSAGE COMING\"\r\n\t\t\t  }\r\n\t\t    })\t\r\n\t\t  }\r\n\t\t} else if (respMessage.name === this.props.loginUser) {\r\n\t\t\tthis.setState({userId: respMessage.id})\r\n\t\t}\r\n\t    \r\n\t  })\r\n\t  \r\n\t  this.stompClient.subscribe(messageTypes._MESSAGE_DEST_BROADCASTUSERS, (payload) => {\r\n\t    var respMessage = JSON.parse(payload.body);\r\n\t\tif (respMessage.messageReceiver) {\r\n\t\t  var rArray = respMessage.messageReceiver.split(\",\")\r\n\t      this.setState({receiverList: rArray})\r\n\t\t}\r\n\t  })\r\n\t  \r\n\t  this.stompClient.send(messageTypes._MESSAGE_DEST_ADDUSER, {}, JSON.stringify({\r\n\t\t\tname: this.props.loginUser,\r\n\t\t\tonlineStatus: messageTypes._STATUS_ONLINE\r\n\t  }))\r\n\t  \r\n\t}\r\n\telse {\r\n\t  this.setState({isConnected:false})\r\n\t}\r\n  }\r\n  \r\n  sendMessage = (chatmsg ) => {\r\n\tif (this.sockjs.readyState === messageTypes._SOCKET_READY) {  \r\n\t  if ((Date.now() - this.start) > (1000*60*5)) {\r\n\t\tthis.stompClient.send(messageTypes._MESSAGE_DEST_SENDMSG, {}, JSON.stringify({\r\n\t\t\t\tmessageSender: messageTypes._MESSAGE__TIME_SPLITTER,\r\n\t\t\t\tmessageReceiver: '',\r\n\t\t\t\tmessage: new Date(this.start).toLocaleTimeString()\r\n\t\t\t})\t\t\r\n\t\t)\r\n\t\t\r\n\t  }\r\n\t  this.start = Date.now()\r\n\t  if (chatmsg === \";'\") {\r\n\t    document.getElementById('mCard').innerHTML = \"\"\t  \r\n\t  }\r\n\t  else {\r\n\t  this.stompClient.send(messageTypes._MESSAGE_DEST_SENDMSG, {}, JSON.stringify({\r\n\t\t\t\tmessageSender: this.props.loginUser,\r\n\t\t\t\tmessageReceiver: this.props.loginUser === 'wolf'? 'bunny' : 'wolf',\r\n\t\t\t\tmessage: chatmsg,\r\n\t\t\t}))\r\n\t  }\r\n\t}\r\n\t\r\n  }\r\n  \r\n  connectToReceiver = (chatters) => {\r\n\tvar receivers = chatters.join('')\r\n\tconsole.log(\"after join:\"+receivers)\r\n\t\r\n\tvar endpoint = this.props.loginUser+receivers\r\n\r\n\tif (this.currentEndpoint === endpoint) {\r\n\t  return\r\n\t}\r\n\tthis.currentEndpoint = endpoint\r\n\tthis.stompClient.subscribe(messageTypes._CHAT_TOPIC_PREFIX+endpoint,(payload) => {\r\n\t  var respMessage = JSON.parse(payload.body);\r\n\t  /*var newMessages = this.state.messages.splice(0,0, respMessage)\r\n\t  this.setState({messaage: newMessages})*/\r\n\t  this.insertMessage(respMessage)\r\n\t  \r\n\t  if (!this.isWindowFocused) {\r\n\t    document.title = \"<<< MESSAGE COMING\"\r\n\t  }\r\n\t})\r\n\t\r\n\tif (Array.isArray(receivers)) {\r\n\t  receivers.forEach(r=> {\r\n\t    this.stompClient.send(messageTypes._MESSAGE_DEST_ADDCHANNEL, {}, JSON.stringify({\r\n\t\t\t\tmessageSender: this.props.loginUser,\r\n\t\t\t\tmessageReceiver: r,\r\n\t\t\t\tmessage: endpoint\r\n\t\t\t}))\r\n\t  })\r\n\t  this.setState({connectedList:receivers})\r\n\r\n\t}\r\n\telse {\r\n\t  this.stompClient.send(messageTypes._MESSAGE_DEST_ADDCHANNEL, {}, JSON.stringify({\r\n\t\t\t\tmessageSender: this.props.loginUser,\r\n\t\t\t\tmessageReceiver: receivers,\r\n\t\t\t\tmessage: endpoint\r\n\t\t\t}))\t\r\n\t  \t  this.setState({connectedList:receivers.split()})\r\n\r\n\t}\r\n  }\r\n  \r\n  render() {\r\n    const { messages } = this.state;\r\n\tconst messageCount = this.state.messages.length;\r\n\tconst loginUser = this.props.loginUser;\r\n\tconst isLoggedIn = this.props.isLoggedIn;\r\n\tconst receivers = this.state.receiverList;\r\n\tconst connectedList = this.state.connectedList;\r\n\tconst isConnected = this.state.isConnected;\r\n\t\r\n\treturn (\r\n\t  <Container className=\"mb-1\"  >\r\n\t    <Jumbotron style={{backgroundColor:'#e9ecef'}}>\r\n\t\t \r\n\t\t  <Row  className=\"mb-2\">\r\n\t\t    <Col>\r\n\t\t\t  <Counters loginUser={loginUser} isConnected={isConnected} totalMessages={messageCount} isLoggedIn={isLoggedIn} receivers={receivers} connectToReceiver={this.connectToReceiver} />\r\n\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t\r\n\t\t\t<Row >\r\n\t\t\t  <Col>\r\n\t\t\t    <DivSample />\r\n\t\t\t\t\r\n\t\t\t  </Col>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"mb-0\" >\r\n\t\t\t  <Col>\r\n\t\t\t  <br/>\r\n\t\t\t  </Col>\r\n\t\t\t</Row>\t\r\n\t\t\t<Row className=\"mb-0\" >\r\n\t\t\t  <Col>\r\n\t\t\t\t<MessageEditor sendMessage={this.sendMessage}/>\r\n\t\t\t  </Col>\r\n\t\t\t</Row>\r\n\t\t  </Jumbotron>\r\n        </Container>\r\n\t  )\r\n  }\r\n}\r\nexport default Chat","/Users/junlu/Documents/react/my-app/src/LoginControl.js",[],"/Users/junlu/Documents/react/my-app/src/MessageCard.js",[],["96","97"],"/Users/junlu/Documents/react/my-app/src/Counter.js",["98","99"],"import {Badge, ToggleButton, ToggleButtonGroup } from 'react-bootstrap'\r\nimport {useState} from 'react';\r\n\r\nconst OnlineButtons = (props) => {\r\n  const [value, setValue] = useState(['']);\r\n\r\n  if (props.receivers.length > 1) {\r\n    const rs =props.receivers.map((receiver, index) => {\r\n\t  if (props.User === receiver)\r\n\t    return ''\r\n\t  else\r\n\t    return <ToggleButton variant=\"warning\" size=\"sm\" value={receiver} >{receiver}</ToggleButton> \r\n    })\r\n  \r\n    return <ToggleButtonGroup type=\"checkbox\" value={value} onChange={props.connectToReceiver}>{rs}</ToggleButtonGroup>\r\n  }\r\n  else\r\n    return  <Badge pill variant=\"danger\">No one</Badge>\r\n}\r\n\r\nconst CounterBadge = (props) => {\r\n\tconst User = props.loginUser\r\n\tconst totalMessages = props.totalMessages\r\n\tconst isLoggedIn = props.isLoggedIn\r\n\tconst receivers = props.receivers\r\n\tconst isConnected = props.isConnected\r\n\t\r\n\tif (isConnected)\r\n\t  return (\r\n\t\t<div>\r\n\t\t  <Badge pill variant=\"primary\">Total Messages: {totalMessages}</Badge>{' '}\r\n\t\t  <Badge pill variant=\"primary\">You: {User}</Badge>{' '}\r\n\t\t  <Badge pill variant=\"primary\">online: </Badge>{' '}\r\n\t\t  <OnlineButtons receivers={receivers} connectToReceiver={props.connectToReceiver} User={User}/>\r\n\t\t</div>\r\n\t  )\r\n\telse \r\n\t  return (\r\n\t\t<div>\r\n\t\t  <Badge pill variant=\"primary\">Total Messages: {totalMessages}</Badge>{' '}\r\n\t\t  <Badge pill variant=\"info\">connecting...</Badge>{' '}\r\n\t\t  <Badge pill variant=\"primary\">receivers: </Badge>\r\n\t\t  <OnlineButtons receivers={receivers} connectToReceiver={props.connectToReceiver} User={User}/>\r\n\t\t</div>\r\n\t  )\r\n\t\t\r\n}\r\n\r\nconst Counters = (props) => {\r\n  const { totalMessages, loginUser, isLoggedIn, receivers, isConnected } = props;\r\n  return (\r\n\t<CounterBadge totalMessages={totalMessages} isConnected={isConnected} loginUser={loginUser} isLoggedIn={isLoggedIn} receivers= {receivers} connectToReceiver={props.connectToReceiver}/>\r\n  )\r\n}\r\nexport default Counters;","/Users/junlu/Documents/react/my-app/src/store/index.js",[],["100","101"],"/Users/junlu/Documents/react/my-app/src/messageBoard/MessageBoard.js",["102","103","104","105"],"/Users/junlu/Documents/react/my-app/src/store/reducer.js",[],"/Users/junlu/Documents/react/my-app/src/messageBoard/store/index.js",[],"/Users/junlu/Documents/react/my-app/src/messageBoard/store/constants.js",[],"/Users/junlu/Documents/react/my-app/src/messageBoard/store/actionCreator.js",[],"/Users/junlu/Documents/react/my-app/src/messageBoard/store/reducer.js",["106"],"/Users/junlu/Documents/react/my-app/src/header/index.js",["107","108","109","110","111"],"/Users/junlu/Documents/react/my-app/src/SockConstants.js",[],"/Users/junlu/Documents/react/my-app/src/CardSample.js",["112","113","114","115"],"import Card from 'react-bootstrap/Card'\r\nimport ReactDOM from 'react-dom'\r\nimport React, {Component} from 'react'\r\nimport Image from 'react-bootstrap/Image'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nconst CardSample = (props) => {\r\n  const senderName = props.loginUser + \".jpg\";\r\n  var receiverName=\"noone.jpg\"\r\n  var connectionIcon = \"noconnection.jpg\"\r\n  if (props.connectedList.length > 0) {\r\n\treceiverName = props.connectedList[0]+ \".jpg\";\r\n  }\r\n  if (props.isConnected) {\r\n    connectionIcon = \"connected.jpg\"\t  \r\n  }\r\n  return (\r\n    <Card style={{ border:\"none\",width: '100%', \"textAlign\": \"center\", backgroundColor:'#e9ecef'}}>\r\n      <Card.Body >\r\n        <Card.Title>\r\n\t\t  <table>\r\n\t\t    <tr>\r\n\t\t\t  <td>\r\n\t\t\t\t<Image src={receiverName} alt={receiverName} width=\"40px\" height=\"40px\" style={{\"border-radius\":\"50%\"}} />\r\n\t\t\t  </td>\r\n\t\t\t  <td id=\"mTitle\" style={{width: '100%', \"textAlign\": \"center\"}}>\r\n\t\t      </td>\r\n\t\t\t  <td>\r\n\t\t\t\t<Image src={senderName} alt={senderName} width=\"40px\" height=\"40px\" style={{\"border-radius\":\"50%\"}} />\r\n\t\t\t  </td>\r\n\t\t    </tr>\r\n\t\t  </table>\r\n\t\t</Card.Title>\r\n\t\t<Card.Text id=\"mCard\" >\r\n\t    </Card.Text>\r\n      </Card.Body>\r\n\t\r\n    </Card>\r\n  )\r\n  \r\n}\r\n  \r\nconst MesssgeCard = (props) => {\r\n  return (\r\n\t<CardSample loginUser={props.loginUser} connectedList={props.connectedList} isConnected={props.isConnected}/>\r\n  )\r\n}\r\n\r\nexport default MesssgeCard","/Users/junlu/Documents/react/my-app/src/dviSample.js",["116","117","118","119","120"],"import Card from 'react-bootstrap/Card'\r\nimport ReactDOM from 'react-dom'\r\nimport React, {Component} from 'react'\r\nimport Image from 'react-bootstrap/Image'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nconst MsgDiv = (props) => {\r\n \r\n  return (\r\n    <div id=\"mCard\"  style={{border:\"1px\",overflow: \"auto\", width: '100%', height: '550px', backgroundColor:'#e9ecef',textAlign: \"center\"}}>\r\n\t\r\n\t</div>\r\n  )\r\n  \r\n}\r\n  \r\nconst DivSample = (props) => {\r\n  return (\r\n\t<MsgDiv />\r\n  )\r\n}\r\n\r\nexport default DivSample",{"ruleId":"121","severity":1,"message":"122","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":18},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"130","line":4,"column":20,"nodeType":"123","messageId":"124","endLine":4,"endColumn":25},{"ruleId":"121","severity":1,"message":"131","line":9,"column":8,"nodeType":"123","messageId":"124","endLine":9,"endColumn":16},{"ruleId":"121","severity":1,"message":"132","line":10,"column":8,"nodeType":"123","messageId":"124","endLine":10,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":60,"column":96,"nodeType":"135","messageId":"136","endLine":60,"endColumn":97},{"ruleId":"133","severity":1,"message":"134","line":60,"column":108,"nodeType":"135","messageId":"136","endLine":60,"endColumn":109},{"ruleId":"133","severity":1,"message":"134","line":62,"column":66,"nodeType":"135","messageId":"136","endLine":62,"endColumn":67},{"ruleId":"133","severity":1,"message":"134","line":62,"column":98,"nodeType":"135","messageId":"136","endLine":62,"endColumn":99},{"ruleId":"133","severity":1,"message":"134","line":68,"column":130,"nodeType":"135","messageId":"136","endLine":68,"endColumn":131},{"ruleId":"121","severity":1,"message":"137","line":224,"column":13,"nodeType":"123","messageId":"124","endLine":224,"endColumn":21},{"ruleId":"121","severity":1,"message":"138","line":229,"column":8,"nodeType":"123","messageId":"124","endLine":229,"endColumn":21},{"ruleId":"125","replacedBy":"139"},{"ruleId":"127","replacedBy":"140"},{"ruleId":"121","severity":1,"message":"141","line":5,"column":17,"nodeType":"123","messageId":"124","endLine":5,"endColumn":25},{"ruleId":"121","severity":1,"message":"142","line":24,"column":8,"nodeType":"123","messageId":"124","endLine":24,"endColumn":18},{"ruleId":"125","replacedBy":"143"},{"ruleId":"127","replacedBy":"144"},{"ruleId":"121","severity":1,"message":"145","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"146","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":17},{"ruleId":"121","severity":1,"message":"147","line":3,"column":21,"nodeType":"123","messageId":"124","endLine":3,"endColumn":30},{"ruleId":"121","severity":1,"message":"148","line":34,"column":23,"nodeType":"123","messageId":"124","endLine":34,"endColumn":27},{"ruleId":"149","severity":1,"message":"150","line":8,"column":1,"nodeType":"151","endLine":41,"endColumn":2},{"ruleId":"121","severity":1,"message":"145","line":1,"column":16,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"152","line":3,"column":21,"nodeType":"123","messageId":"124","endLine":3,"endColumn":27},{"ruleId":"121","severity":1,"message":"153","line":3,"column":40,"nodeType":"123","messageId":"124","endLine":3,"endColumn":46},{"ruleId":"121","severity":1,"message":"154","line":3,"column":47,"nodeType":"123","messageId":"124","endLine":3,"endColumn":55},{"ruleId":"121","severity":1,"message":"142","line":17,"column":9,"nodeType":"123","messageId":"124","endLine":17,"endColumn":19},{"ruleId":"121","severity":1,"message":"131","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":16},{"ruleId":"121","severity":1,"message":"145","line":3,"column":16,"nodeType":"123","messageId":"124","endLine":3,"endColumn":25},{"ruleId":"121","severity":1,"message":"155","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":13},{"ruleId":"121","severity":1,"message":"156","line":15,"column":5,"nodeType":"123","messageId":"124","endLine":15,"endColumn":19},{"ruleId":"121","severity":1,"message":"157","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":12},{"ruleId":"121","severity":1,"message":"131","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":16},{"ruleId":"121","severity":1,"message":"145","line":3,"column":16,"nodeType":"123","messageId":"124","endLine":3,"endColumn":25},{"ruleId":"121","severity":1,"message":"158","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":13},{"ruleId":"121","severity":1,"message":"155","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":13},"no-unused-vars","'CardSample' is defined but never used.","Identifier","unusedVar","no-native-reassign",["159"],"no-negated-in-lhs",["160"],"'MessageTable' is defined but never used.","'Badge' is defined but never used.","'ReactDOM' is defined but never used.","'MesssgeCard' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'messages' is assigned a value but never used.","'connectedList' is assigned a value but never used.",["159"],["160"],"'setValue' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.",["159"],["160"],"'Component' is defined but never used.","'PropTypes' is defined but never used.","'ListGroup' is defined but never used.","'list' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Router' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'Table' is defined but never used.","'connectionIcon' is assigned a value but never used.","'Card' is defined but never used.","'Image' is defined but never used.","no-global-assign","no-unsafe-negation"]